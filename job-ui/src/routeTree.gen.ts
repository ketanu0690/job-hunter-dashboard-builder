/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as NotFoundRouteImport } from './routes/$notFound'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedManageBlogRouteImport } from './routes/_authenticated/manageBlog'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedBlogsRouteImport } from './routes/_authenticated/blogs'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const NotFoundRoute = NotFoundRouteImport.update({
  id: '/$notFound',
  path: '/$notFound',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedManageBlogRoute = AuthenticatedManageBlogRouteImport.update({
  id: '/manageBlog',
  path: '/manageBlog',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedBlogsRoute = AuthenticatedBlogsRouteImport.update({
  id: '/blogs',
  path: '/blogs',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$notFound': typeof NotFoundRoute
  '/login': typeof LoginRoute
  '/blogs': typeof AuthenticatedBlogsRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/manageBlog': typeof AuthenticatedManageBlogRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$notFound': typeof NotFoundRoute
  '/login': typeof LoginRoute
  '/blogs': typeof AuthenticatedBlogsRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/manageBlog': typeof AuthenticatedManageBlogRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$notFound': typeof NotFoundRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/blogs': typeof AuthenticatedBlogsRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/manageBlog': typeof AuthenticatedManageBlogRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$notFound'
    | '/login'
    | '/blogs'
    | '/dashboard'
    | '/manageBlog'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$notFound' | '/login' | '/blogs' | '/dashboard' | '/manageBlog'
  id:
    | '__root__'
    | '/'
    | '/$notFound'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/blogs'
    | '/_authenticated/dashboard'
    | '/_authenticated/manageBlog'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotFoundRoute: typeof NotFoundRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$notFound': {
      id: '/$notFound'
      path: '/$notFound'
      fullPath: '/$notFound'
      preLoaderRoute: typeof NotFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/manageBlog': {
      id: '/_authenticated/manageBlog'
      path: '/manageBlog'
      fullPath: '/manageBlog'
      preLoaderRoute: typeof AuthenticatedManageBlogRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/blogs': {
      id: '/_authenticated/blogs'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof AuthenticatedBlogsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedBlogsRoute: typeof AuthenticatedBlogsRoute
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedManageBlogRoute: typeof AuthenticatedManageBlogRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedBlogsRoute: AuthenticatedBlogsRoute,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedManageBlogRoute: AuthenticatedManageBlogRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotFoundRoute: NotFoundRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
